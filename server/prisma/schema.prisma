// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  CLIENT
  FREELANCER
}

enum ProjectStatus {
  POSTED
  IN_PROGRESS
  COMPLETED
  PAID
  CANCELLED
}

enum BidStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum TransactionStatus {
  PENDING
  RELEASED
  REFUNDED
}

model User {
  id             String   @id @default(uuid())
  name           String
  email          String   @unique
  passwordHash   String   @map("password_hash")
  role           UserRole
  languages      String[] // For freelancers: target languages they can translate
  rating         Float?   @default(0)
  profilePicture String?  @map("profile_picture")
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")

  // Relations
  clientProjects    Project[]     @relation("ClientProjects")
  bids              Bid[]
  clientTransactions Transaction[] @relation("ClientTransactions")
  freelancerTransactions Transaction[] @relation("FreelancerTransactions")
  reviewsGiven      Review[]      @relation("ReviewsGiven")
  reviewsReceived   Review[]      @relation("ReviewsReceived")

  @@map("users")
}

model Project {
  id             String        @id @default(uuid())
  clientId       String        @map("client_id")
  title          String
  description    String
  sourceLanguage String        @map("source_language")
  targetLanguage String        @map("target_language")
  budget         Float
  deadline       DateTime?
  status         ProjectStatus @default(POSTED)
  attachedFiles  String[]      @map("attached_files")
  createdAt      DateTime      @default(now()) @map("created_at")
  updatedAt      DateTime      @updatedAt @map("updated_at")

  // Relations
  client       User          @relation("ClientProjects", fields: [clientId], references: [id])
  bids         Bid[]
  transactions Transaction[]
  reviews      Review[]

  @@map("projects")
}

model Bid {
  id            String    @id @default(uuid())
  projectId     String    @map("project_id")
  freelancerId  String    @map("freelancer_id")
  bidAmount     Float     @map("bid_amount")
  estimatedTime String    @map("estimated_time")
  status        BidStatus @default(PENDING)
  createdAt     DateTime  @default(now()) @map("created_at")

  // Relations
  project    Project @relation(fields: [projectId], references: [id])
  freelancer User    @relation(fields: [freelancerId], references: [id])

  @@map("bids")
}

model Transaction {
  id              String            @id @default(uuid())
  projectId       String            @map("project_id")
  clientId        String            @map("client_id")
  freelancerId    String            @map("freelancer_id")
  amount          Float
  status          TransactionStatus @default(PENDING)
  stripePaymentId String?           @map("stripe_payment_id")
  createdAt       DateTime          @default(now()) @map("created_at")

  // Relations
  project    Project @relation(fields: [projectId], references: [id])
  client     User    @relation("ClientTransactions", fields: [clientId], references: [id])
  freelancer User    @relation("FreelancerTransactions", fields: [freelancerId], references: [id])

  @@map("transactions")
}

model Review {
  id         String   @id @default(uuid())
  projectId  String   @map("project_id")
  reviewerId String   @map("reviewer_id")
  revieweeId String   @map("reviewee_id")
  rating     Int      @db.SmallInt
  comment    String?
  createdAt  DateTime @default(now()) @map("created_at")

  // Relations
  project  Project @relation(fields: [projectId], references: [id])
  reviewer User    @relation("ReviewsGiven", fields: [reviewerId], references: [id])
  reviewee User    @relation("ReviewsReceived", fields: [revieweeId], references: [id])

  @@map("reviews")
}
